{"version":3,"sources":["components/ErrorBoundry.js","components/Scroll.js","components/CardList.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["ErrorBoundry","props","state","hasError","err","info","this","setState","children","Component","Scroll","className","CardList","robots","Error","SearchBox","searchInput","type","placeholder","onChange","App","onSearchInput","e","searchField","target","value","fetch","then","res","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAoBeA,E,kDAjBd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,UAAU,GAHO,E,qDAMnB,SAAkBC,EAAKC,GACtBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAE3B,WACC,OAAIG,KAAKJ,MAAMC,SACP,gEAEDG,KAAKL,MAAMO,a,GAdOC,aCKZC,G,MAJA,SAACT,GACf,OAAO,qBAAKU,UAAU,SAAf,SAAyBV,EAAMO,aCYxBI,EAbE,SAAC,GAAe,EAAbC,OAElB,MAAM,IAAIC,MAAM,WCUHC,EAbG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACpB,OACC,qBAAKL,UAAU,MAAf,SACC,uBACCA,UAAU,mCACVM,KAAK,SACLC,YAAY,mBACZC,SAAUH,OCyCCI,E,kDA1Cd,aAAe,IAAD,8BACb,gBAeDC,cAAgB,SAACC,GAChB,EAAKf,SAAS,CAAEgB,YAAaD,EAAEE,OAAOC,SAftC,EAAKvB,MAAQ,CACZW,OAAQ,GACRU,YAAa,IAJD,E,qDAOd,WAAqB,IAAD,OACnBG,MAAM,8CACJC,MAAK,SAACC,GACNA,EAAIC,UAEJF,MAAK,SAACG,GACN,EAAKvB,SAAS,CAAEM,OAAQiB,S,oBAM3B,WACC,MAAgCxB,KAAKJ,MAA7BW,EAAR,EAAQA,OAAQU,EAAhB,EAAgBA,YACVQ,EAAiBlB,EAAOmB,QAAO,SAACC,GACrC,OAAOA,EAAMC,KAAKC,cAAcC,SAASb,EAAYY,kBAEtD,OAAKtB,EAAOwB,OAIV,sBAAK1B,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWK,YAAaV,KAAKe,gBAC7B,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUR,OAAQkB,WARf,oBAAIpB,UAAU,KAAd,6B,GA1BQF,aCKH6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBZ,M","file":"static/js/main.732b609d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\tcomponentDidCatch(err, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>ERROR!!!!!!!! NO BUENO :(!!!!!</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll = (props) => {\n\treturn <div className=\"scroll\">{props.children}</div>;\n};\n\nexport default Scroll;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tif (true) {\n\t\tthrow new Error('Arrggg');\n\t}\n\treturn (\n\t\t<div>\n\t\t\t{robots.map((robot, i) => {\n\t\t\t\treturn <Card key={i} id={robot[i].id} name={robot[i].name} email={robot[i].email} />;\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchInput }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"search robots...\"\n\t\t\t\tonChange={searchInput}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchField: ''\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((res) => {\n\t\t\t\tres.json();\n\t\t\t})\n\t\t\t.then((users) => {\n\t\t\t\tthis.setState({ robots: users });\n\t\t\t});\n\t}\n\tonSearchInput = (e) => {\n\t\tthis.setState({ searchField: e.target.value });\n\t};\n\trender() {\n\t\tconst { robots, searchField } = this.state;\n\t\tconst filteredRobots = robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\t\tif (!robots.length) {\n\t\t\treturn <h1 className=\"tc\">Loading....</h1>;\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchInput={this.onSearchInput} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}